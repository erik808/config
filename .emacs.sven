(add-to-list 'load-path "~/.emacs.d/elpa")

;; Package manager
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(package-initialize)

;; Eval .emacs
(defun eval-emacs ()
  (interactive)
  (load-file "~/.emacs"))
(global-set-key (kbd "C-c e") 'eval-emacs)

(defun install-missing ()
  (interactive)
  ;; list the packages you want
  (setq package-list '(ample-theme helm elpy multiple-cursors auto-complete))

  ;; fetch the list of packages available
  (package-refresh-contents)

  ;; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))

  (eval-emacs))

;; Daemon shutdown
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))

(load-file (expand-file-name ".emacs.shared" (file-name-directory load-file-name)))

;;Helm
(require 'helm)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x f") 'helm-for-files)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(setq-default helm-buffer-max-length nil)

;; Don't open 1000000 emacs instances (workflow!!)
(setq ns-pop-up-frames nil)

;; Fancy replace tjak
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)

;; LaTeX
(setq-default TeX-command-default "LaTeX")
(setq-default TeX-PDF-mode t)
(eval-after-load "tex"
  '(add-to-list 'TeX-command-list
                '("Rubber" "rubber -d %t" TeX-run-command nil t) t))

;; Disable secondary overlay crap
(global-unset-key [M-mouse-1])
(global-unset-key [M-drag-mouse-1])
(global-unset-key [M-down-mouse-1])
(global-unset-key [M-mouse-3])
(global-unset-key [M-mouse-2])

;; Disable insert key
(global-unset-key [(insert)])
(global-set-key [(control insert)] 'overwrite-mode)

;; Python mode
(require 'elpy)
(elpy-enable)

;; Python aut-complete
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

;; Line numbers
(global-linum-mode 1)
(setq linum-format "%d")

;; Bracket highlighting
(show-paren-mode 1)

;; Refresh and disable undo warning when refreshing
(global-auto-revert-mode 1)

;; Recent file buffer
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 100)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; Newline indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Scrolling
(setq-default scroll-preserve-screen-position t)
(setq-default mouse-wheel-progressive-speed nil)

;; LaTeX sentence filling
(setq-default sentence-end-double-space nil)
(global-set-key (kbd "M-Q") 'fill-sentence)

(defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "nederlands") "english" "nederlands")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

(global-set-key (kbd "<f8>") 'fd-switch-dictionary)

(defun switch-style()
  (interactive)
  (let* ((st c-indentation-style)
         (change (if (string= st "jonas-style") "sven-style" "jonas-style")))
    (c-set-style change)
    (message "Style switched from %s to %s" st change)
    ))
(global-set-key (kbd "<f7>") 'switch-style)

;; Commenting
(global-set-key (kbd "C-c c") 'comment-region-lines)

;; Indenting
(defconst jonas-style
  '("whitesmith"
    (c-offsets-alist . ((innamespace . [0])))
    (c-basic-offset . 2)))

(c-add-style "jonas-style" jonas-style)
(setq c-default-style "jonas-style")

(defconst sven-style
  '("K&R"
    (c-offsets-alist . ((innamespace . [0])))
    (c-basic-offset . 4)))

(c-add-style "sven-style" sven-style)

(defconst sven2-style
  '("K&R"
    (c-offsets-alist . ((innamespace . [0])))
    (c-basic-offset . 2)))

(c-add-style "sven2-style" sven2-style)

(defun set-cmake-project-directory()
  (interactive)
  (let ((project-dir
         (file-name-nondirectory(directory-file-name (cmake-project-find-root-directory)))))
    (let ((new-dir
           (concat (file-name-as-directory "/mnt/D") "build_" project-dir "_emacs")))
      (cmake-project--changed-build-directory new-dir)
      (turn-on-flymake-mode)
      (cmake-project--changed-build-directory new-dir)
      )
    )
  )

;; Tabs are spaces
(setq-default indent-tabs-mode nil)

(global-set-key "\C-c/" 'rotate-word-at-point)

(custom-set-variables
 '(ansi-color-names-vector ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(column-number-mode t)
 '(global-whitespace-mode t)
 '(inhibit-startup-screen t)
 '(show-paren-mode t)
 '(matlab-fill-code nil)
 '(matlab-functions-have-end t)
 '(size-indication-mode t)
 '(tool-bar-mode nil)
 '(warning-suppress-types (quote ((undo discard-info))))
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(whitespace-line-column 8000)
 '(custom-enabled-themes (quote (ample)))
 '(custom-safe-themes t))
(custom-set-faces
 '(whitespace-empty ((t (:foreground "gray25"))))
 '(whitespace-hspace ((t (:foreground "gray25"))))
 '(whitespace-indentation ((t (:foreground "gray25"))))
 '(whitespace-line ((t nil)))
 '(whitespace-newline ((t (:foreground "gray25"))))
 '(whitespace-space ((t (:foreground "gray25"))))
 '(whitespace-space-after-tab ((t (:foreground "gray25"))))
 '(whitespace-space-before-tab ((t (:foreground "gray25"))))
 '(whitespace-tab ((t (:foreground "gray25"))))
 '(whitespace-trailing ((t (:foreground "gray25" :weight bold)))))
