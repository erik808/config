;;==================================================================
;; FUNCTIONS
;;==================================================================

;; Functions to fill a sentence in LaTeX, which makes for easier diffing.
;; I bind it to M-Q
(defun unfill-paragraph()
  (interactive)
  (forward-paragraph 1)
  (forward-paragraph -1)
  (while (looking-at paragraph-start)
    (forward-line 1))
  (let ((beg (point)))
    (forward-paragraph 1)
    (backward-char 1)
    (while (> (point) beg)
      (join-line)
      (beginning-of-line))))

(defun fill-sentence()
  (interactive)
  (save-excursion
    (fill-paragraph)
    (unfill-paragraph)

    (let ((end-of-paragraph (make-marker)))
      (save-excursion
        (forward-paragraph)
        (backward-sentence)
        (forward-sentence)
        (set-marker end-of-paragraph (point)))
      (forward-sentence)
      (while (< (point) end-of-paragraph)
        (just-one-space)
        (delete-backward-char 1)
        (newline)
        (forward-sentence))
      (set-marker end-of-paragraph nil))))

;; Comment a selected region
(defun comment-region-lines ()
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (when (or (not transient-mark-mode) (region-active-p))
      (setq start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point))
            end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point))))
    (comment-or-uncomment-region start end)))


;; Function to revert all buffers simultaneously -EmacsWiki
(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (file-exists-p (buffer-file-name))
                 (not (buffer-modified-p)))
        (revert-buffer t t t) )))
  (message "Refreshed open files.") )
;;==================================================================

;;================== GTEST =========================================
(setenv "CTEST_OUTPUT_ON_FAILURE" "1")
(setenv "GTEST_COLOR" "1")
;;==================================================================

;;================== CMAKE =========================================
(require 'cmake-project)
(defun maybe-cmake-project-hook ()
  (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
(add-hook 'c-mode-hook 'maybe-cmake-project-hook)
(add-hook 'c++-mode-hook 'maybe-cmake-project-hook)

(defun cmake-project-current-build-command ()
  "Command line to compile current project as configured in the
build directory."
  (concat "cmake --build "
          (shell-quote-argument (expand-file-name
                                 cmake-project-build-directory)) " --target" " check" ))

;;==================================================================

;;================== FLYMAKE =======================================
(require 'flymake)
(require 'flymake-cursor)

(setq flymake-gui-warnings-enabled t)

(defun turn-on-flymake-mode ()
  (if (and (boundp 'flymake-mode) flymake-mode)
      ()
    (flymake-mode t)))

(add-hook 'c-mode-common-hook (lambda () (turn-on-flymake-mode)))
(add-hook 'c++-mode-hook (lambda () (turn-on-flymake-mode)))

(defun cmake-project-flymake-init ()
  (cmake-project-current-build-command))

(setq flymake-log-level -1)
;;==================================================================
