
;;==================== Notes ================================================
;; Some package dependencies:
;;  - GNU global
;;  - Exuberant ctags
;;
;; byte recompiling elpa:
;; (byte-recompile-directory (expand-file-name "~/.emacs.d/elpa") 0 t)
;;===========================================================================

(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/lisp/matlab-emacs")	
(add-to-list 'load-path "~/.emacs.d/emacs-color-theme-solarized-master/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/emacs-color-theme-solarized-master/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/")	
(add-to-list 'custom-theme-load-path "~/config")

;;======================== Package manager =====================================
(require 'package)
(add-to-list 'package-archives
			 '("marmalade" .
			   "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)
;;==============================================================================

;;=============== Some modes ===============================================
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(savehist-mode 1)
(show-paren-mode 1)
(which-func-mode 1)
(global-linum-mode -1)
(column-number-mode 1)
(global-auto-revert-mode t)
(global-whitespace-mode t)
;;===========================================================================

;;=============== Smooth scrolling =====================================
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 2) ;; keyboard scroll one line at a time
;;======================================================================

;;========================= org-mode ==========================
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-agenda-files (list "~/Dropbox/todo.org"))

;; get tikz pictures to preview
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
(setq org-latex-create-formula-image-program 'imagemagick)
(setq initial-major-mode 'org-mode)
;;=============================================================

(define-key global-map (kbd "RET") 'newline-and-indent)

(setq-default c-default-style "linux"
			  tab-width 4
			  c-basic-offset 4
			  indent-tabs-mode nil)

(setq inhibit-startup-screen t)
(setq linum-format "%d ")

;;=============== Matlab/Octave mode ======================
(load-library "matlab-load")
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list
 'auto-mode-alist
 '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command "matlab")
;;=========================================================

;;========== printing =====================================
(setq ps-print-color-p 'color)
(setq ps-number-of-columns 1)
(setq ps-font-size 10)
(setq ps-line-number t)
(setq ps-line-number-font-size 7)
(setq ps-line-number-font 'Courier)
(setq ps-line-number-step 1)
;;=========================================================

;;========== multiple cursors =============================
(require 'multiple-cursors)
(global-set-key (kbd "C-M-d") 'mc/mark-next-like-this)
(global-set-key (kbd "C-M-s") 'mc/mark-previous-like-this)
;;=========================================================

;;============= commenting ================================
(defun comment-eclipse ()
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (when (or (not transient-mark-mode) (region-active-p))
      (setq start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point))
            end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point))))
    (comment-or-uncomment-region start end)))
(global-set-key (kbd "C-c c") 'comment-eclipse)
;;=========================================================

;;---------- switch between header and implementation -----
(global-set-key (kbd "C-c f") 'ff-find-other-file)
;;---------- expand region --------------------------------
(require 'expand-region)
(global-set-key (kbd "C-c e") 'er/expand-region)
;;---------------------------------------------------------

;;===================== helm ================================
(add-to-list 'load-path "~/.emacs.d/helm/")
(require 'helm-config)
(require 'helm)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-X") 'execute-extended-command)
(global-set-key (kbd "C-x f") 'helm-for-files)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(setq helm-display-header-line nil)
(set-face-attribute 'helm-source-header nil :height .8)
(helm-autoresize-mode 1)
(setq helm-autoresize-max-height 30)
(setq helm-autoresize-min-height 30)
;;===========================================================

;;========= fill column  ===================================
(require 'fill-column-indicator)
(setq fci-rule-column 83)
(setq fci-rule-color "gray")
;;==========================================================

;; ======== sr-speedbar =====================================
(require 'sr-speedbar)
(global-set-key (kbd "s-s") 'sr-speedbar-toggle)
(setq sr-speedbar-right-side nil)
;; ==========================================================

;; ============= Ctrl-Tab  ==================================
(global-set-key (kbd "s-a") 'other-window)
;; ==========================================================

;; ======= LaTeX sentence filling ===========================
(setq-default sentence-end-double-space nil)
(global-set-key (kbd "M-Q") 'fill-sentence)
;;===========================================================

;; ============= AucTeX stuff ===============================
(setq-default TeX-master t)
(setq-default TeX-command-default "LaTeX")
(setq-default TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
;; ==========================================================

;; ================ auto complete ===========================
(require 'auto-complete)
(global-auto-complete-mode t)
(add-to-list 'ac-modes 'octave-mode)
(add-to-list 'ac-modes 'c++-mode)
(add-to-list 'ac-modes 'octave-mode)
(add-to-list 'ac-modes 'LaTeX-mode)
(add-to-list 'ac-modes 'latex-mode)
;;(require 'auto-complete-config)
;;(ac-config-default)
;;(setq ac-source-yasnippet nil)
;; ==========================================================

;; ================ complete any mode =======================
;; (add-hook 'after-init-hook 'global-company-mode)
;; ================ complete any mode =======================

;;========= ggtags == ===========================================
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'f90-mode)
              (ggtags-mode 1))))
;;===============================================================

;;============== move text ======================================
(global-set-key (kbd "M-<up>") 'move-text-up)
(global-set-key (kbd "M-<down>") 'move-text-down)
;;===============================================================

;;================ height of status bar   =======================
(set-face-attribute 'mode-line nil :height 90)
;;===============================================================

;;===================== transparancy ============================
;;(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha . (96 96))) 
;;===============================================================

;;=================== Diary ========================================
(setq diary-file "~/Dropbox/.diary")
(setq view-diary-entries-initially t	
	  mark-diary-entries-in-calendar t
	  number-of-diary-entries 7)
(add-hook 'diary-display-hook 'fancy-diary-display)
(add-hook 'today-visible-calendar-hook 'calendar-mark-today)
;;==================================================================

;;================== FLYMAKE =======================================
(require 'flymake)
(require 'flymake-cursor)

(setq flymake-gui-warnings-enabled t)

(defun turn-on-flymake-mode ()
  (if (and (boundp 'flymake-mode) flymake-mode)
      ()
    (flymake-mode t)))

;; (add-hook 'c-mode-common-hook (lambda () (turn-on-flymake-mode)))
;; (add-hook 'c++-mode-hook (lambda () (turn-on-flymake-mode)))
;; (add-hook 'fortran-mode-hook (lambda () (turn-on-flymake-mode)))
;; (add-hook 'f90-mode-hook (lambda () (turn-on-flymake-mode)))

(defun cmake-project-flymake-init ()
  (cmake-project-current-build-command-list))

(setq flymake-log-level -1)
;;==================================================================			

;;==================== CMAKE =======================================
(defcustom cmake-project-default-build-dir-name "build/"
  "Default name for CMake build tree directories."
  :type 'directory
  :group 'data)
;;==================================================================

;;==================== Ergo movement ===============================
;; (require 'ergo-movement-mode)
;; (ergo-movement-mode 1)
;;==================================================================

;;==================== Dired customizations = ======================
(setq dired-listing-switches "-alh")
(add-hook 'dired-mode-hook 'toggle-truncate-lines)
;;====================================+=============================

;;==================== RSYNC in Dired ==============================
(require 'dired)

(defun remove-tramp-prefix (list)
  (let (value)
	(dolist (element list value)
	  (setq value (cons (replace-regexp-in-string "/ssh:" "" element) value))
	  )))

(defun ora-dired-rsync (dest)
  (interactive
   (list
	(expand-file-name
	 (read-file-name
	  "Rsync to:"
	  (dired-dwim-target-directory)
	  ))))
  ;; store all selected files into "files" list
  (let ((files (remove-tramp-prefix
				(dired-get-marked-files
				 nil current-prefix-arg)))
		
        ;; the rsync command
        (rsync-command
         "rsync -rvt --progress --protect-args "))
    ;; add all selected file names as arguments
    ;; to the rsync command
    (dolist (file files)
      (setq rsync-command
            (concat rsync-command
					(shell-quote-argument file)
					" ")))

    ;; append the destination
    (setq rsync-command
          (concat rsync-command
                  (shell-quote-argument
				   (replace-regexp-in-string "/ssh:" "" dest))))

    ;; run the async shell command from another window and buffer
	(other-window 1)
	(find-file dest)
	(switch-to-buffer "*rsync*")
	(async-shell-command rsync-command "*rsync*")
	))

(define-key dired-mode-map "Y" 'ora-dired-rsync)
;;===================================================================

;; ====================== emacs-w3m + dired ====================================
 (require 'w3m-load)
 (setq browse-url-browser-function 'w3m-browse-url)
 (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
 (global-set-key "\C-xm" 'browse-url-at-point)

 (add-hook 'dired-mode-hook	
 	   (lambda ()
	       (define-key dired-mode-map "\C-xm" 'dired-w3m-find-file)))

 (defun dired-w3m-find-file ()
   (interactive)
   (require 'w3m)
   (let ((file (dired-get-filename)))
     (if (y-or-n-p (format "Open 'w3m' %s " (file-name-nondirectory file)))
	 (w3m-find-file file))))
		   
;; =============================================================================
